# Shared by scripts for customisation of openssl config
dn() {
  # Build DN string
  dn=''
  if [ -n "$C" ]; then
    dn+="/C=$C"
  fi
  if [ -n "$ST" ]; then
    dn+="/ST=$ST"
  fi
  if [ -n "$L" ]; then
    dn+="/ST=$L"
  fi
  if [ -n "$O" ]; then
    dn+="/O=$O"
  fi
  if [ -n "$OU" ]; then
    dn+="/OU=$OU"
  fi
  if [ -n "$1" ]; then
    dn+="/CN=$1"
  elif [ -n "$CN" ]; then
    dn+="/CN=$CN"
  else
    echo "At minimum a CN should be defined for a DN/cert subject. Aborting." >&2 
    exit 1
  fi
  if [ -n "$UNSTRUCTURED_NAME" ]; then
    dn+="/unstructuredName=$UNSTRUCTURED_NAME"
  fi
  echo -n "$dn"
}
# Default values
ROOT_CA_CN="${ROOT_CA_CN:-Personal Root CA}"
ROOT_CA_DIR='./ca'
ROOT_CA_FILE_BASENAME='personal_root_ca'
ROOT_CA_KEY="$ROOT_CA_DIR/private/$ROOT_CA_FILE_BASENAME.key.pem"
ROOT_CA_CERT="$ROOT_CA_DIR/certs/$ROOT_CA_FILE_BASENAME.cert.pem"
KEY_DIR='./private'
CERT_DIR='./certs'
PFX_DIR='./pfx'
CSR_DIR='./csr'
DEFAULT_YEARS_VALID=2
ROOT_CA_YEARS_VALID=10
OPENSSL_CONF_MY_CA="
[ req ]
prompt = no
x509_extensions = ca_ext
distinguished_name = ca_dn
[ ca_dn ]
CN = ${ROOT_CA_CN}
[ ca ]
default_ca	= personal_ca
[ personal_ca ]
certs = ${ROOT_CA_DIR}/certs		# Where the issued certs are kept
crl_dir = ${ROOT_CA_DIR}/crl		# Where the issued crl are kept
database = ${ROOT_CA_DIR}/index.txt	# database index file.
new_certs_dir	= ${ROOT_CA_DIR}/newcerts		# default place for new certs.
serial		= ${ROOT_CA_DIR}/serial
crlnumber	= ${ROOT_CA_DIR}/crlnumber
crl		= ${ROOT_CA_DIR}/crl.pem 		# The current CRL
certificate	= ${ROOT_CA_CERT}
private_key	= ${ROOT_CA_KEY}
RANDFILE	= ${ROOT_CA_DIR}/private/.rand	# private random number file
default_md = default
unique_subject = no
policy = ca_policy
name_opt = ca_default
cert_opt = ca_default
copy_extensions = copy
x509_extensions = not_ca
[ ca_policy ]
countryName = optional
stateOrProvinceName	= optional
localityName = optional
organizationName = optional
organizationalUnitName = optional
commonName = supplied
emailAddress = optional
unstructuredName = optional
[ ca_ext ]
basicConstraints = critical, CA:true
keyUsage = critical, keyCertSign, cRLSign
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid, issuer
[ not_ca ]
basicConstraints = critical, CA:false
authorityKeyIdentifier=keyid:always
"